Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> constructions
Rule 2     constructions -> constructions construction
Rule 3     constructions -> construction
Rule 4     constructions -> <empty>
Rule 5     construction -> declaration
Rule 6     construction -> fundef
Rule 7     construction -> instruction
Rule 8     declarations -> declarations declaration
Rule 9     declarations -> <empty>
Rule 10    declaration -> TYPE inits ;
Rule 11    declaration -> error ;
Rule 12    inits -> inits , init
Rule 13    inits -> init
Rule 14    init -> ID = expression
Rule 15    instructions -> instructions instruction
Rule 16    instructions -> instruction
Rule 17    instruction -> print_instr
Rule 18    instruction -> labeled_instr
Rule 19    instruction -> assignment
Rule 20    instruction -> choice_instr
Rule 21    instruction -> while_instr
Rule 22    instruction -> repeat_instr
Rule 23    instruction -> return_instr
Rule 24    instruction -> break_instr
Rule 25    instruction -> continue_instr
Rule 26    instruction -> compound_instr
Rule 27    instruction -> expression ;
Rule 28    print_instr -> PRINT expression ;
Rule 29    print_instr -> PRINT error ;
Rule 30    labeled_instr -> ID : instruction
Rule 31    assignment -> ID = expression ;
Rule 32    choice_instr -> IF ( condition ) instruction
Rule 33    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 34    choice_instr -> IF ( error ) instruction
Rule 35    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 36    while_instr -> WHILE ( condition ) instruction
Rule 37    while_instr -> WHILE ( error ) instruction
Rule 38    repeat_instr -> REPEAT instructions UNTIL condition ;
Rule 39    return_instr -> RETURN expression ;
Rule 40    continue_instr -> CONTINUE ;
Rule 41    break_instr -> BREAK ;
Rule 42    compound_instr -> { declarations instructions }
Rule 43    condition -> expression
Rule 44    const -> INTEGER
Rule 45    const -> FLOAT
Rule 46    const -> STRING
Rule 47    expression_id -> ID
Rule 48    expression -> const
Rule 49    expression -> expression_id
Rule 50    expression -> expression + expression
Rule 51    expression -> expression - expression
Rule 52    expression -> expression * expression
Rule 53    expression -> expression / expression
Rule 54    expression -> expression % expression
Rule 55    expression -> expression | expression
Rule 56    expression -> expression & expression
Rule 57    expression -> expression ^ expression
Rule 58    expression -> expression AND expression
Rule 59    expression -> expression OR expression
Rule 60    expression -> expression SHL expression
Rule 61    expression -> expression SHR expression
Rule 62    expression -> expression EQ expression
Rule 63    expression -> expression NEQ expression
Rule 64    expression -> expression > expression
Rule 65    expression -> expression < expression
Rule 66    expression -> expression LE expression
Rule 67    expression -> expression GE expression
Rule 68    expression -> ( expression )
Rule 69    expression -> ( error )
Rule 70    expression -> ID ( expr_list_or_empty )
Rule 71    expression -> ID ( error )
Rule 72    expr_list_or_empty -> expr_list
Rule 73    expr_list_or_empty -> <empty>
Rule 74    expr_list -> expr_list , expression
Rule 75    expr_list -> expression
Rule 76    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 77    args_list_or_empty -> args_list
Rule 78    args_list_or_empty -> <empty>
Rule 79    args_list -> args_list , arg
Rule 80    args_list -> arg
Rule 81    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 54
&                    : 56
(                    : 32 33 34 35 36 37 68 69 70 71 76
)                    : 32 33 34 35 36 37 68 69 70 71 76
*                    : 52
+                    : 50
,                    : 12 74 79
-                    : 51
/                    : 53
:                    : 30
;                    : 10 11 27 28 29 31 38 39 40 41
<                    : 65
=                    : 14 31
>                    : 64
AND                  : 58
BREAK                : 41
CONTINUE             : 40
ELSE                 : 33 35
EQ                   : 62
FLOAT                : 45
GE                   : 67
ID                   : 14 30 31 47 70 71 76 81
IF                   : 32 33 34 35
INTEGER              : 44
LE                   : 66
NEQ                  : 63
OR                   : 59
PRINT                : 28 29
REPEAT               : 38
RETURN               : 39
SHL                  : 60
SHR                  : 61
STRING               : 46
TYPE                 : 10 76 81
UNTIL                : 38
WHILE                : 36 37
^                    : 57
error                : 11 29 34 35 37 69 71
{                    : 42
|                    : 55
}                    : 42

Nonterminals, with rules where they appear

arg                  : 79 80
args_list            : 77 79
args_list_or_empty   : 76
assignment           : 19
break_instr          : 24
choice_instr         : 20
compound_instr       : 26 76
condition            : 32 33 36 38
const                : 48
construction         : 2 3
constructions        : 1 2
continue_instr       : 25
declaration          : 5 8
declarations         : 8 42
expr_list            : 72 74
expr_list_or_empty   : 70
expression           : 14 27 28 31 39 43 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 74 75
expression_id        : 49
fundef               : 6
init                 : 12 13
inits                : 10 12
instruction          : 7 15 16 30 32 33 33 34 35 35 36 37
instructions         : 15 38 42
labeled_instr        : 18
print_instr          : 17
program              : 0
repeat_instr         : 22
return_instr         : 23
while_instr          : 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . constructions
    (2) constructions -> . constructions construction
    (3) constructions -> . construction
    (4) constructions -> .
    (5) construction -> . declaration
    (6) construction -> . fundef
    (7) construction -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (76) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 4 (constructions -> .)
    TYPE            shift and go to state 5
    error           shift and go to state 25
    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

  ! TYPE            [ reduce using rule 4 (constructions -> .) ]
  ! error           [ reduce using rule 4 (constructions -> .) ]
  ! PRINT           [ reduce using rule 4 (constructions -> .) ]
  ! ID              [ reduce using rule 4 (constructions -> .) ]
  ! IF              [ reduce using rule 4 (constructions -> .) ]
  ! WHILE           [ reduce using rule 4 (constructions -> .) ]
  ! REPEAT          [ reduce using rule 4 (constructions -> .) ]
  ! RETURN          [ reduce using rule 4 (constructions -> .) ]
  ! BREAK           [ reduce using rule 4 (constructions -> .) ]
  ! CONTINUE        [ reduce using rule 4 (constructions -> .) ]
  ! {               [ reduce using rule 4 (constructions -> .) ]
  ! (               [ reduce using rule 4 (constructions -> .) ]
  ! INTEGER         [ reduce using rule 4 (constructions -> .) ]
  ! FLOAT           [ reduce using rule 4 (constructions -> .) ]
  ! STRING          [ reduce using rule 4 (constructions -> .) ]

    return_instr                   shift and go to state 1
    program                        shift and go to state 3
    compound_instr                 shift and go to state 4
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    declaration                    shift and go to state 7
    fundef                         shift and go to state 8
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    repeat_instr                   shift and go to state 12
    print_instr                    shift and go to state 29
    expression                     shift and go to state 15
    labeled_instr                  shift and go to state 16
    choice_instr                   shift and go to state 14
    constructions                  shift and go to state 19
    instruction                    shift and go to state 32
    while_instr                    shift and go to state 33
    construction                   shift and go to state 34
    expression_id                  shift and go to state 21

state 1

    (23) instruction -> return_instr .

    TYPE            reduce using rule 23 (instruction -> return_instr .)
    error           reduce using rule 23 (instruction -> return_instr .)
    PRINT           reduce using rule 23 (instruction -> return_instr .)
    ID              reduce using rule 23 (instruction -> return_instr .)
    IF              reduce using rule 23 (instruction -> return_instr .)
    WHILE           reduce using rule 23 (instruction -> return_instr .)
    REPEAT          reduce using rule 23 (instruction -> return_instr .)
    RETURN          reduce using rule 23 (instruction -> return_instr .)
    BREAK           reduce using rule 23 (instruction -> return_instr .)
    CONTINUE        reduce using rule 23 (instruction -> return_instr .)
    {               reduce using rule 23 (instruction -> return_instr .)
    (               reduce using rule 23 (instruction -> return_instr .)
    INTEGER         reduce using rule 23 (instruction -> return_instr .)
    FLOAT           reduce using rule 23 (instruction -> return_instr .)
    STRING          reduce using rule 23 (instruction -> return_instr .)
    $end            reduce using rule 23 (instruction -> return_instr .)
    UNTIL           reduce using rule 23 (instruction -> return_instr .)
    }               reduce using rule 23 (instruction -> return_instr .)
    ELSE            reduce using rule 23 (instruction -> return_instr .)


state 2

    (42) compound_instr -> { . declarations instructions }
    (8) declarations -> . declarations declaration
    (9) declarations -> .

    TYPE            reduce using rule 9 (declarations -> .)
    error           reduce using rule 9 (declarations -> .)
    PRINT           reduce using rule 9 (declarations -> .)
    ID              reduce using rule 9 (declarations -> .)
    IF              reduce using rule 9 (declarations -> .)
    WHILE           reduce using rule 9 (declarations -> .)
    REPEAT          reduce using rule 9 (declarations -> .)
    RETURN          reduce using rule 9 (declarations -> .)
    BREAK           reduce using rule 9 (declarations -> .)
    CONTINUE        reduce using rule 9 (declarations -> .)
    {               reduce using rule 9 (declarations -> .)
    (               reduce using rule 9 (declarations -> .)
    INTEGER         reduce using rule 9 (declarations -> .)
    FLOAT           reduce using rule 9 (declarations -> .)
    STRING          reduce using rule 9 (declarations -> .)

    declarations                   shift and go to state 35

state 3

    (0) S' -> program .



state 4

    (26) instruction -> compound_instr .

    TYPE            reduce using rule 26 (instruction -> compound_instr .)
    error           reduce using rule 26 (instruction -> compound_instr .)
    PRINT           reduce using rule 26 (instruction -> compound_instr .)
    ID              reduce using rule 26 (instruction -> compound_instr .)
    IF              reduce using rule 26 (instruction -> compound_instr .)
    WHILE           reduce using rule 26 (instruction -> compound_instr .)
    REPEAT          reduce using rule 26 (instruction -> compound_instr .)
    RETURN          reduce using rule 26 (instruction -> compound_instr .)
    BREAK           reduce using rule 26 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 26 (instruction -> compound_instr .)
    {               reduce using rule 26 (instruction -> compound_instr .)
    (               reduce using rule 26 (instruction -> compound_instr .)
    INTEGER         reduce using rule 26 (instruction -> compound_instr .)
    FLOAT           reduce using rule 26 (instruction -> compound_instr .)
    STRING          reduce using rule 26 (instruction -> compound_instr .)
    $end            reduce using rule 26 (instruction -> compound_instr .)
    UNTIL           reduce using rule 26 (instruction -> compound_instr .)
    }               reduce using rule 26 (instruction -> compound_instr .)
    ELSE            reduce using rule 26 (instruction -> compound_instr .)


state 5

    (10) declaration -> TYPE . inits ;
    (76) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (12) inits -> . inits , init
    (13) inits -> . init
    (14) init -> . ID = expression

    ID              shift and go to state 38

    init                           shift and go to state 36
    inits                          shift and go to state 37

state 6

    (28) print_instr -> PRINT . expression ;
    (29) print_instr -> PRINT . error ;
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    error           shift and go to state 39
    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 40

state 7

    (5) construction -> declaration .

    TYPE            reduce using rule 5 (construction -> declaration .)
    error           reduce using rule 5 (construction -> declaration .)
    PRINT           reduce using rule 5 (construction -> declaration .)
    ID              reduce using rule 5 (construction -> declaration .)
    IF              reduce using rule 5 (construction -> declaration .)
    WHILE           reduce using rule 5 (construction -> declaration .)
    REPEAT          reduce using rule 5 (construction -> declaration .)
    RETURN          reduce using rule 5 (construction -> declaration .)
    BREAK           reduce using rule 5 (construction -> declaration .)
    CONTINUE        reduce using rule 5 (construction -> declaration .)
    {               reduce using rule 5 (construction -> declaration .)
    (               reduce using rule 5 (construction -> declaration .)
    INTEGER         reduce using rule 5 (construction -> declaration .)
    FLOAT           reduce using rule 5 (construction -> declaration .)
    STRING          reduce using rule 5 (construction -> declaration .)
    $end            reduce using rule 5 (construction -> declaration .)


state 8

    (6) construction -> fundef .

    TYPE            reduce using rule 6 (construction -> fundef .)
    error           reduce using rule 6 (construction -> fundef .)
    PRINT           reduce using rule 6 (construction -> fundef .)
    ID              reduce using rule 6 (construction -> fundef .)
    IF              reduce using rule 6 (construction -> fundef .)
    WHILE           reduce using rule 6 (construction -> fundef .)
    REPEAT          reduce using rule 6 (construction -> fundef .)
    RETURN          reduce using rule 6 (construction -> fundef .)
    BREAK           reduce using rule 6 (construction -> fundef .)
    CONTINUE        reduce using rule 6 (construction -> fundef .)
    {               reduce using rule 6 (construction -> fundef .)
    (               reduce using rule 6 (construction -> fundef .)
    INTEGER         reduce using rule 6 (construction -> fundef .)
    FLOAT           reduce using rule 6 (construction -> fundef .)
    STRING          reduce using rule 6 (construction -> fundef .)
    $end            reduce using rule 6 (construction -> fundef .)


state 9

    (38) repeat_instr -> REPEAT . instructions UNTIL condition ;
    (15) instructions -> . instructions instruction
    (16) instructions -> . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    print_instr                    shift and go to state 29
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    instructions                   shift and go to state 42
    assignment                     shift and go to state 26
    instruction                    shift and go to state 43
    while_instr                    shift and go to state 33
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    choice_instr                   shift and go to state 14
    repeat_instr                   shift and go to state 12

state 10

    (40) continue_instr -> CONTINUE . ;

    ;               shift and go to state 44


state 11

    (48) expression -> const .

    +               reduce using rule 48 (expression -> const .)
    -               reduce using rule 48 (expression -> const .)
    *               reduce using rule 48 (expression -> const .)
    /               reduce using rule 48 (expression -> const .)
    %               reduce using rule 48 (expression -> const .)
    |               reduce using rule 48 (expression -> const .)
    &               reduce using rule 48 (expression -> const .)
    ^               reduce using rule 48 (expression -> const .)
    AND             reduce using rule 48 (expression -> const .)
    OR              reduce using rule 48 (expression -> const .)
    SHL             reduce using rule 48 (expression -> const .)
    SHR             reduce using rule 48 (expression -> const .)
    EQ              reduce using rule 48 (expression -> const .)
    NEQ             reduce using rule 48 (expression -> const .)
    >               reduce using rule 48 (expression -> const .)
    <               reduce using rule 48 (expression -> const .)
    LE              reduce using rule 48 (expression -> const .)
    GE              reduce using rule 48 (expression -> const .)
    ;               reduce using rule 48 (expression -> const .)
    )               reduce using rule 48 (expression -> const .)
    ,               reduce using rule 48 (expression -> const .)


state 12

    (22) instruction -> repeat_instr .

    TYPE            reduce using rule 22 (instruction -> repeat_instr .)
    error           reduce using rule 22 (instruction -> repeat_instr .)
    PRINT           reduce using rule 22 (instruction -> repeat_instr .)
    ID              reduce using rule 22 (instruction -> repeat_instr .)
    IF              reduce using rule 22 (instruction -> repeat_instr .)
    WHILE           reduce using rule 22 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 22 (instruction -> repeat_instr .)
    RETURN          reduce using rule 22 (instruction -> repeat_instr .)
    BREAK           reduce using rule 22 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 22 (instruction -> repeat_instr .)
    {               reduce using rule 22 (instruction -> repeat_instr .)
    (               reduce using rule 22 (instruction -> repeat_instr .)
    INTEGER         reduce using rule 22 (instruction -> repeat_instr .)
    FLOAT           reduce using rule 22 (instruction -> repeat_instr .)
    STRING          reduce using rule 22 (instruction -> repeat_instr .)
    $end            reduce using rule 22 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 22 (instruction -> repeat_instr .)
    }               reduce using rule 22 (instruction -> repeat_instr .)
    ELSE            reduce using rule 22 (instruction -> repeat_instr .)


state 13

    (68) expression -> ( . expression )
    (69) expression -> ( . error )
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    error           shift and go to state 45
    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 46

state 14

    (20) instruction -> choice_instr .

    TYPE            reduce using rule 20 (instruction -> choice_instr .)
    error           reduce using rule 20 (instruction -> choice_instr .)
    PRINT           reduce using rule 20 (instruction -> choice_instr .)
    ID              reduce using rule 20 (instruction -> choice_instr .)
    IF              reduce using rule 20 (instruction -> choice_instr .)
    WHILE           reduce using rule 20 (instruction -> choice_instr .)
    REPEAT          reduce using rule 20 (instruction -> choice_instr .)
    RETURN          reduce using rule 20 (instruction -> choice_instr .)
    BREAK           reduce using rule 20 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 20 (instruction -> choice_instr .)
    {               reduce using rule 20 (instruction -> choice_instr .)
    (               reduce using rule 20 (instruction -> choice_instr .)
    INTEGER         reduce using rule 20 (instruction -> choice_instr .)
    FLOAT           reduce using rule 20 (instruction -> choice_instr .)
    STRING          reduce using rule 20 (instruction -> choice_instr .)
    $end            reduce using rule 20 (instruction -> choice_instr .)
    UNTIL           reduce using rule 20 (instruction -> choice_instr .)
    }               reduce using rule 20 (instruction -> choice_instr .)
    ELSE            reduce using rule 20 (instruction -> choice_instr .)


state 15

    (27) instruction -> expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               shift and go to state 51
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 16

    (18) instruction -> labeled_instr .

    TYPE            reduce using rule 18 (instruction -> labeled_instr .)
    error           reduce using rule 18 (instruction -> labeled_instr .)
    PRINT           reduce using rule 18 (instruction -> labeled_instr .)
    ID              reduce using rule 18 (instruction -> labeled_instr .)
    IF              reduce using rule 18 (instruction -> labeled_instr .)
    WHILE           reduce using rule 18 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 18 (instruction -> labeled_instr .)
    RETURN          reduce using rule 18 (instruction -> labeled_instr .)
    BREAK           reduce using rule 18 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 18 (instruction -> labeled_instr .)
    {               reduce using rule 18 (instruction -> labeled_instr .)
    (               reduce using rule 18 (instruction -> labeled_instr .)
    INTEGER         reduce using rule 18 (instruction -> labeled_instr .)
    FLOAT           reduce using rule 18 (instruction -> labeled_instr .)
    STRING          reduce using rule 18 (instruction -> labeled_instr .)
    $end            reduce using rule 18 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 18 (instruction -> labeled_instr .)
    }               reduce using rule 18 (instruction -> labeled_instr .)
    ELSE            reduce using rule 18 (instruction -> labeled_instr .)


state 17

    (39) return_instr -> RETURN . expression ;
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 66

state 18

    (32) choice_instr -> IF . ( condition ) instruction
    (33) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (34) choice_instr -> IF . ( error ) instruction
    (35) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 67


state 19

    (1) program -> constructions .
    (2) constructions -> constructions . construction
    (5) construction -> . declaration
    (6) construction -> . fundef
    (7) construction -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (76) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    $end            reduce using rule 1 (program -> constructions .)
    TYPE            shift and go to state 5
    error           shift and go to state 25
    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    compound_instr                 shift and go to state 4
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    declaration                    shift and go to state 7
    fundef                         shift and go to state 8
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    repeat_instr                   shift and go to state 12
    print_instr                    shift and go to state 29
    expression                     shift and go to state 15
    labeled_instr                  shift and go to state 16
    choice_instr                   shift and go to state 14
    instruction                    shift and go to state 32
    while_instr                    shift and go to state 33
    construction                   shift and go to state 68
    expression_id                  shift and go to state 21

state 20

    (30) labeled_instr -> ID . : instruction
    (31) assignment -> ID . = expression ;
    (70) expression -> ID . ( expr_list_or_empty )
    (71) expression -> ID . ( error )
    (47) expression_id -> ID .

    :               shift and go to state 71
    =               shift and go to state 70
    (               shift and go to state 69
    ;               reduce using rule 47 (expression_id -> ID .)
    +               reduce using rule 47 (expression_id -> ID .)
    -               reduce using rule 47 (expression_id -> ID .)
    *               reduce using rule 47 (expression_id -> ID .)
    /               reduce using rule 47 (expression_id -> ID .)
    %               reduce using rule 47 (expression_id -> ID .)
    |               reduce using rule 47 (expression_id -> ID .)
    &               reduce using rule 47 (expression_id -> ID .)
    ^               reduce using rule 47 (expression_id -> ID .)
    AND             reduce using rule 47 (expression_id -> ID .)
    OR              reduce using rule 47 (expression_id -> ID .)
    SHL             reduce using rule 47 (expression_id -> ID .)
    SHR             reduce using rule 47 (expression_id -> ID .)
    EQ              reduce using rule 47 (expression_id -> ID .)
    NEQ             reduce using rule 47 (expression_id -> ID .)
    >               reduce using rule 47 (expression_id -> ID .)
    <               reduce using rule 47 (expression_id -> ID .)
    LE              reduce using rule 47 (expression_id -> ID .)
    GE              reduce using rule 47 (expression_id -> ID .)


state 21

    (49) expression -> expression_id .

    +               reduce using rule 49 (expression -> expression_id .)
    -               reduce using rule 49 (expression -> expression_id .)
    *               reduce using rule 49 (expression -> expression_id .)
    /               reduce using rule 49 (expression -> expression_id .)
    %               reduce using rule 49 (expression -> expression_id .)
    |               reduce using rule 49 (expression -> expression_id .)
    &               reduce using rule 49 (expression -> expression_id .)
    ^               reduce using rule 49 (expression -> expression_id .)
    AND             reduce using rule 49 (expression -> expression_id .)
    OR              reduce using rule 49 (expression -> expression_id .)
    SHL             reduce using rule 49 (expression -> expression_id .)
    SHR             reduce using rule 49 (expression -> expression_id .)
    EQ              reduce using rule 49 (expression -> expression_id .)
    NEQ             reduce using rule 49 (expression -> expression_id .)
    >               reduce using rule 49 (expression -> expression_id .)
    <               reduce using rule 49 (expression -> expression_id .)
    LE              reduce using rule 49 (expression -> expression_id .)
    GE              reduce using rule 49 (expression -> expression_id .)
    ;               reduce using rule 49 (expression -> expression_id .)
    )               reduce using rule 49 (expression -> expression_id .)
    ,               reduce using rule 49 (expression -> expression_id .)


state 22

    (24) instruction -> break_instr .

    TYPE            reduce using rule 24 (instruction -> break_instr .)
    error           reduce using rule 24 (instruction -> break_instr .)
    PRINT           reduce using rule 24 (instruction -> break_instr .)
    ID              reduce using rule 24 (instruction -> break_instr .)
    IF              reduce using rule 24 (instruction -> break_instr .)
    WHILE           reduce using rule 24 (instruction -> break_instr .)
    REPEAT          reduce using rule 24 (instruction -> break_instr .)
    RETURN          reduce using rule 24 (instruction -> break_instr .)
    BREAK           reduce using rule 24 (instruction -> break_instr .)
    CONTINUE        reduce using rule 24 (instruction -> break_instr .)
    {               reduce using rule 24 (instruction -> break_instr .)
    (               reduce using rule 24 (instruction -> break_instr .)
    INTEGER         reduce using rule 24 (instruction -> break_instr .)
    FLOAT           reduce using rule 24 (instruction -> break_instr .)
    STRING          reduce using rule 24 (instruction -> break_instr .)
    $end            reduce using rule 24 (instruction -> break_instr .)
    UNTIL           reduce using rule 24 (instruction -> break_instr .)
    }               reduce using rule 24 (instruction -> break_instr .)
    ELSE            reduce using rule 24 (instruction -> break_instr .)


state 23

    (45) const -> FLOAT .

    ;               reduce using rule 45 (const -> FLOAT .)
    +               reduce using rule 45 (const -> FLOAT .)
    -               reduce using rule 45 (const -> FLOAT .)
    *               reduce using rule 45 (const -> FLOAT .)
    /               reduce using rule 45 (const -> FLOAT .)
    %               reduce using rule 45 (const -> FLOAT .)
    |               reduce using rule 45 (const -> FLOAT .)
    &               reduce using rule 45 (const -> FLOAT .)
    ^               reduce using rule 45 (const -> FLOAT .)
    AND             reduce using rule 45 (const -> FLOAT .)
    OR              reduce using rule 45 (const -> FLOAT .)
    SHL             reduce using rule 45 (const -> FLOAT .)
    SHR             reduce using rule 45 (const -> FLOAT .)
    EQ              reduce using rule 45 (const -> FLOAT .)
    NEQ             reduce using rule 45 (const -> FLOAT .)
    >               reduce using rule 45 (const -> FLOAT .)
    <               reduce using rule 45 (const -> FLOAT .)
    LE              reduce using rule 45 (const -> FLOAT .)
    GE              reduce using rule 45 (const -> FLOAT .)
    )               reduce using rule 45 (const -> FLOAT .)
    ,               reduce using rule 45 (const -> FLOAT .)


state 24

    (25) instruction -> continue_instr .

    TYPE            reduce using rule 25 (instruction -> continue_instr .)
    error           reduce using rule 25 (instruction -> continue_instr .)
    PRINT           reduce using rule 25 (instruction -> continue_instr .)
    ID              reduce using rule 25 (instruction -> continue_instr .)
    IF              reduce using rule 25 (instruction -> continue_instr .)
    WHILE           reduce using rule 25 (instruction -> continue_instr .)
    REPEAT          reduce using rule 25 (instruction -> continue_instr .)
    RETURN          reduce using rule 25 (instruction -> continue_instr .)
    BREAK           reduce using rule 25 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 25 (instruction -> continue_instr .)
    {               reduce using rule 25 (instruction -> continue_instr .)
    (               reduce using rule 25 (instruction -> continue_instr .)
    INTEGER         reduce using rule 25 (instruction -> continue_instr .)
    FLOAT           reduce using rule 25 (instruction -> continue_instr .)
    STRING          reduce using rule 25 (instruction -> continue_instr .)
    $end            reduce using rule 25 (instruction -> continue_instr .)
    UNTIL           reduce using rule 25 (instruction -> continue_instr .)
    }               reduce using rule 25 (instruction -> continue_instr .)
    ELSE            reduce using rule 25 (instruction -> continue_instr .)


state 25

    (11) declaration -> error . ;

    ;               shift and go to state 72


state 26

    (19) instruction -> assignment .

    TYPE            reduce using rule 19 (instruction -> assignment .)
    error           reduce using rule 19 (instruction -> assignment .)
    PRINT           reduce using rule 19 (instruction -> assignment .)
    ID              reduce using rule 19 (instruction -> assignment .)
    IF              reduce using rule 19 (instruction -> assignment .)
    WHILE           reduce using rule 19 (instruction -> assignment .)
    REPEAT          reduce using rule 19 (instruction -> assignment .)
    RETURN          reduce using rule 19 (instruction -> assignment .)
    BREAK           reduce using rule 19 (instruction -> assignment .)
    CONTINUE        reduce using rule 19 (instruction -> assignment .)
    {               reduce using rule 19 (instruction -> assignment .)
    (               reduce using rule 19 (instruction -> assignment .)
    INTEGER         reduce using rule 19 (instruction -> assignment .)
    FLOAT           reduce using rule 19 (instruction -> assignment .)
    STRING          reduce using rule 19 (instruction -> assignment .)
    $end            reduce using rule 19 (instruction -> assignment .)
    UNTIL           reduce using rule 19 (instruction -> assignment .)
    }               reduce using rule 19 (instruction -> assignment .)
    ELSE            reduce using rule 19 (instruction -> assignment .)


state 27

    (41) break_instr -> BREAK . ;

    ;               shift and go to state 73


state 28

    (36) while_instr -> WHILE . ( condition ) instruction
    (37) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 74


state 29

    (17) instruction -> print_instr .

    TYPE            reduce using rule 17 (instruction -> print_instr .)
    error           reduce using rule 17 (instruction -> print_instr .)
    PRINT           reduce using rule 17 (instruction -> print_instr .)
    ID              reduce using rule 17 (instruction -> print_instr .)
    IF              reduce using rule 17 (instruction -> print_instr .)
    WHILE           reduce using rule 17 (instruction -> print_instr .)
    REPEAT          reduce using rule 17 (instruction -> print_instr .)
    RETURN          reduce using rule 17 (instruction -> print_instr .)
    BREAK           reduce using rule 17 (instruction -> print_instr .)
    CONTINUE        reduce using rule 17 (instruction -> print_instr .)
    {               reduce using rule 17 (instruction -> print_instr .)
    (               reduce using rule 17 (instruction -> print_instr .)
    INTEGER         reduce using rule 17 (instruction -> print_instr .)
    FLOAT           reduce using rule 17 (instruction -> print_instr .)
    STRING          reduce using rule 17 (instruction -> print_instr .)
    $end            reduce using rule 17 (instruction -> print_instr .)
    UNTIL           reduce using rule 17 (instruction -> print_instr .)
    }               reduce using rule 17 (instruction -> print_instr .)
    ELSE            reduce using rule 17 (instruction -> print_instr .)


state 30

    (44) const -> INTEGER .

    ;               reduce using rule 44 (const -> INTEGER .)
    +               reduce using rule 44 (const -> INTEGER .)
    -               reduce using rule 44 (const -> INTEGER .)
    *               reduce using rule 44 (const -> INTEGER .)
    /               reduce using rule 44 (const -> INTEGER .)
    %               reduce using rule 44 (const -> INTEGER .)
    |               reduce using rule 44 (const -> INTEGER .)
    &               reduce using rule 44 (const -> INTEGER .)
    ^               reduce using rule 44 (const -> INTEGER .)
    AND             reduce using rule 44 (const -> INTEGER .)
    OR              reduce using rule 44 (const -> INTEGER .)
    SHL             reduce using rule 44 (const -> INTEGER .)
    SHR             reduce using rule 44 (const -> INTEGER .)
    EQ              reduce using rule 44 (const -> INTEGER .)
    NEQ             reduce using rule 44 (const -> INTEGER .)
    >               reduce using rule 44 (const -> INTEGER .)
    <               reduce using rule 44 (const -> INTEGER .)
    LE              reduce using rule 44 (const -> INTEGER .)
    GE              reduce using rule 44 (const -> INTEGER .)
    )               reduce using rule 44 (const -> INTEGER .)
    ,               reduce using rule 44 (const -> INTEGER .)


state 31

    (46) const -> STRING .

    ;               reduce using rule 46 (const -> STRING .)
    +               reduce using rule 46 (const -> STRING .)
    -               reduce using rule 46 (const -> STRING .)
    *               reduce using rule 46 (const -> STRING .)
    /               reduce using rule 46 (const -> STRING .)
    %               reduce using rule 46 (const -> STRING .)
    |               reduce using rule 46 (const -> STRING .)
    &               reduce using rule 46 (const -> STRING .)
    ^               reduce using rule 46 (const -> STRING .)
    AND             reduce using rule 46 (const -> STRING .)
    OR              reduce using rule 46 (const -> STRING .)
    SHL             reduce using rule 46 (const -> STRING .)
    SHR             reduce using rule 46 (const -> STRING .)
    EQ              reduce using rule 46 (const -> STRING .)
    NEQ             reduce using rule 46 (const -> STRING .)
    >               reduce using rule 46 (const -> STRING .)
    <               reduce using rule 46 (const -> STRING .)
    LE              reduce using rule 46 (const -> STRING .)
    GE              reduce using rule 46 (const -> STRING .)
    )               reduce using rule 46 (const -> STRING .)
    ,               reduce using rule 46 (const -> STRING .)


state 32

    (7) construction -> instruction .

    TYPE            reduce using rule 7 (construction -> instruction .)
    error           reduce using rule 7 (construction -> instruction .)
    PRINT           reduce using rule 7 (construction -> instruction .)
    ID              reduce using rule 7 (construction -> instruction .)
    IF              reduce using rule 7 (construction -> instruction .)
    WHILE           reduce using rule 7 (construction -> instruction .)
    REPEAT          reduce using rule 7 (construction -> instruction .)
    RETURN          reduce using rule 7 (construction -> instruction .)
    BREAK           reduce using rule 7 (construction -> instruction .)
    CONTINUE        reduce using rule 7 (construction -> instruction .)
    {               reduce using rule 7 (construction -> instruction .)
    (               reduce using rule 7 (construction -> instruction .)
    INTEGER         reduce using rule 7 (construction -> instruction .)
    FLOAT           reduce using rule 7 (construction -> instruction .)
    STRING          reduce using rule 7 (construction -> instruction .)
    $end            reduce using rule 7 (construction -> instruction .)


state 33

    (21) instruction -> while_instr .

    TYPE            reduce using rule 21 (instruction -> while_instr .)
    error           reduce using rule 21 (instruction -> while_instr .)
    PRINT           reduce using rule 21 (instruction -> while_instr .)
    ID              reduce using rule 21 (instruction -> while_instr .)
    IF              reduce using rule 21 (instruction -> while_instr .)
    WHILE           reduce using rule 21 (instruction -> while_instr .)
    REPEAT          reduce using rule 21 (instruction -> while_instr .)
    RETURN          reduce using rule 21 (instruction -> while_instr .)
    BREAK           reduce using rule 21 (instruction -> while_instr .)
    CONTINUE        reduce using rule 21 (instruction -> while_instr .)
    {               reduce using rule 21 (instruction -> while_instr .)
    (               reduce using rule 21 (instruction -> while_instr .)
    INTEGER         reduce using rule 21 (instruction -> while_instr .)
    FLOAT           reduce using rule 21 (instruction -> while_instr .)
    STRING          reduce using rule 21 (instruction -> while_instr .)
    $end            reduce using rule 21 (instruction -> while_instr .)
    UNTIL           reduce using rule 21 (instruction -> while_instr .)
    }               reduce using rule 21 (instruction -> while_instr .)
    ELSE            reduce using rule 21 (instruction -> while_instr .)


state 34

    (3) constructions -> construction .

    TYPE            reduce using rule 3 (constructions -> construction .)
    error           reduce using rule 3 (constructions -> construction .)
    PRINT           reduce using rule 3 (constructions -> construction .)
    ID              reduce using rule 3 (constructions -> construction .)
    IF              reduce using rule 3 (constructions -> construction .)
    WHILE           reduce using rule 3 (constructions -> construction .)
    REPEAT          reduce using rule 3 (constructions -> construction .)
    RETURN          reduce using rule 3 (constructions -> construction .)
    BREAK           reduce using rule 3 (constructions -> construction .)
    CONTINUE        reduce using rule 3 (constructions -> construction .)
    {               reduce using rule 3 (constructions -> construction .)
    (               reduce using rule 3 (constructions -> construction .)
    INTEGER         reduce using rule 3 (constructions -> construction .)
    FLOAT           reduce using rule 3 (constructions -> construction .)
    STRING          reduce using rule 3 (constructions -> construction .)
    $end            reduce using rule 3 (constructions -> construction .)


state 35

    (42) compound_instr -> { declarations . instructions }
    (8) declarations -> declarations . declaration
    (15) instructions -> . instructions instruction
    (16) instructions -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    TYPE            shift and go to state 75
    error           shift and go to state 25
    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    print_instr                    shift and go to state 29
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    declaration                    shift and go to state 76
    labeled_instr                  shift and go to state 16
    instructions                   shift and go to state 77
    repeat_instr                   shift and go to state 12
    instruction                    shift and go to state 43
    while_instr                    shift and go to state 33
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    choice_instr                   shift and go to state 14
    assignment                     shift and go to state 26

state 36

    (13) inits -> init .

    ;               reduce using rule 13 (inits -> init .)
    ,               reduce using rule 13 (inits -> init .)


state 37

    (10) declaration -> TYPE inits . ;
    (12) inits -> inits . , init

    ;               shift and go to state 78
    ,               shift and go to state 79


state 38

    (76) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (14) init -> ID . = expression

    (               shift and go to state 80
    =               shift and go to state 81


state 39

    (29) print_instr -> PRINT error . ;

    ;               shift and go to state 82


state 40

    (28) print_instr -> PRINT expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               shift and go to state 83
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 41

    (70) expression -> ID . ( expr_list_or_empty )
    (71) expression -> ID . ( error )
    (47) expression_id -> ID .

    (               shift and go to state 69
    +               reduce using rule 47 (expression_id -> ID .)
    -               reduce using rule 47 (expression_id -> ID .)
    *               reduce using rule 47 (expression_id -> ID .)
    /               reduce using rule 47 (expression_id -> ID .)
    %               reduce using rule 47 (expression_id -> ID .)
    |               reduce using rule 47 (expression_id -> ID .)
    &               reduce using rule 47 (expression_id -> ID .)
    ^               reduce using rule 47 (expression_id -> ID .)
    AND             reduce using rule 47 (expression_id -> ID .)
    OR              reduce using rule 47 (expression_id -> ID .)
    SHL             reduce using rule 47 (expression_id -> ID .)
    SHR             reduce using rule 47 (expression_id -> ID .)
    EQ              reduce using rule 47 (expression_id -> ID .)
    NEQ             reduce using rule 47 (expression_id -> ID .)
    >               reduce using rule 47 (expression_id -> ID .)
    <               reduce using rule 47 (expression_id -> ID .)
    LE              reduce using rule 47 (expression_id -> ID .)
    GE              reduce using rule 47 (expression_id -> ID .)
    ;               reduce using rule 47 (expression_id -> ID .)
    )               reduce using rule 47 (expression_id -> ID .)
    ,               reduce using rule 47 (expression_id -> ID .)


state 42

    (38) repeat_instr -> REPEAT instructions . UNTIL condition ;
    (15) instructions -> instructions . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    UNTIL           shift and go to state 84
    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    print_instr                    shift and go to state 29
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    assignment                     shift and go to state 26
    instruction                    shift and go to state 85
    while_instr                    shift and go to state 33
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    choice_instr                   shift and go to state 14
    repeat_instr                   shift and go to state 12

state 43

    (16) instructions -> instruction .

    UNTIL           reduce using rule 16 (instructions -> instruction .)
    PRINT           reduce using rule 16 (instructions -> instruction .)
    ID              reduce using rule 16 (instructions -> instruction .)
    IF              reduce using rule 16 (instructions -> instruction .)
    WHILE           reduce using rule 16 (instructions -> instruction .)
    REPEAT          reduce using rule 16 (instructions -> instruction .)
    RETURN          reduce using rule 16 (instructions -> instruction .)
    BREAK           reduce using rule 16 (instructions -> instruction .)
    CONTINUE        reduce using rule 16 (instructions -> instruction .)
    {               reduce using rule 16 (instructions -> instruction .)
    (               reduce using rule 16 (instructions -> instruction .)
    INTEGER         reduce using rule 16 (instructions -> instruction .)
    FLOAT           reduce using rule 16 (instructions -> instruction .)
    STRING          reduce using rule 16 (instructions -> instruction .)
    }               reduce using rule 16 (instructions -> instruction .)


state 44

    (40) continue_instr -> CONTINUE ; .

    TYPE            reduce using rule 40 (continue_instr -> CONTINUE ; .)
    error           reduce using rule 40 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 40 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 40 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 40 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 40 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 40 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 40 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 40 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 40 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 40 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 40 (continue_instr -> CONTINUE ; .)
    INTEGER         reduce using rule 40 (continue_instr -> CONTINUE ; .)
    FLOAT           reduce using rule 40 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 40 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 40 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 40 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 40 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 40 (continue_instr -> CONTINUE ; .)


state 45

    (69) expression -> ( error . )

    )               shift and go to state 86


state 46

    (68) expression -> ( expression . )
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    )               shift and go to state 87
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 47

    (66) expression -> expression LE . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 88

state 48

    (64) expression -> expression > . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 89

state 49

    (50) expression -> expression + . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 90

state 50

    (63) expression -> expression NEQ . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 91

state 51

    (27) instruction -> expression ; .

    TYPE            reduce using rule 27 (instruction -> expression ; .)
    error           reduce using rule 27 (instruction -> expression ; .)
    PRINT           reduce using rule 27 (instruction -> expression ; .)
    ID              reduce using rule 27 (instruction -> expression ; .)
    IF              reduce using rule 27 (instruction -> expression ; .)
    WHILE           reduce using rule 27 (instruction -> expression ; .)
    REPEAT          reduce using rule 27 (instruction -> expression ; .)
    RETURN          reduce using rule 27 (instruction -> expression ; .)
    BREAK           reduce using rule 27 (instruction -> expression ; .)
    CONTINUE        reduce using rule 27 (instruction -> expression ; .)
    {               reduce using rule 27 (instruction -> expression ; .)
    (               reduce using rule 27 (instruction -> expression ; .)
    INTEGER         reduce using rule 27 (instruction -> expression ; .)
    FLOAT           reduce using rule 27 (instruction -> expression ; .)
    STRING          reduce using rule 27 (instruction -> expression ; .)
    $end            reduce using rule 27 (instruction -> expression ; .)
    UNTIL           reduce using rule 27 (instruction -> expression ; .)
    }               reduce using rule 27 (instruction -> expression ; .)
    ELSE            reduce using rule 27 (instruction -> expression ; .)


state 52

    (54) expression -> expression % . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 92

state 53

    (60) expression -> expression SHL . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 93

state 54

    (57) expression -> expression ^ . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 94

state 55

    (62) expression -> expression EQ . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 95

state 56

    (65) expression -> expression < . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 96

state 57

    (61) expression -> expression SHR . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 97

state 58

    (59) expression -> expression OR . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 98

state 59

    (51) expression -> expression - . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 99

state 60

    (53) expression -> expression / . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 100

state 61

    (55) expression -> expression | . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 101

state 62

    (67) expression -> expression GE . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 102

state 63

    (56) expression -> expression & . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 103

state 64

    (52) expression -> expression * . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 104

state 65

    (58) expression -> expression AND . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 105

state 66

    (39) return_instr -> RETURN expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               shift and go to state 106
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 67

    (32) choice_instr -> IF ( . condition ) instruction
    (33) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (34) choice_instr -> IF ( . error ) instruction
    (35) choice_instr -> IF ( . error ) instruction ELSE instruction
    (43) condition -> . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    error           shift and go to state 107
    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression                     shift and go to state 109
    condition                      shift and go to state 108
    const                          shift and go to state 11
    expression_id                  shift and go to state 21

state 68

    (2) constructions -> constructions construction .

    TYPE            reduce using rule 2 (constructions -> constructions construction .)
    error           reduce using rule 2 (constructions -> constructions construction .)
    PRINT           reduce using rule 2 (constructions -> constructions construction .)
    ID              reduce using rule 2 (constructions -> constructions construction .)
    IF              reduce using rule 2 (constructions -> constructions construction .)
    WHILE           reduce using rule 2 (constructions -> constructions construction .)
    REPEAT          reduce using rule 2 (constructions -> constructions construction .)
    RETURN          reduce using rule 2 (constructions -> constructions construction .)
    BREAK           reduce using rule 2 (constructions -> constructions construction .)
    CONTINUE        reduce using rule 2 (constructions -> constructions construction .)
    {               reduce using rule 2 (constructions -> constructions construction .)
    (               reduce using rule 2 (constructions -> constructions construction .)
    INTEGER         reduce using rule 2 (constructions -> constructions construction .)
    FLOAT           reduce using rule 2 (constructions -> constructions construction .)
    STRING          reduce using rule 2 (constructions -> constructions construction .)
    $end            reduce using rule 2 (constructions -> constructions construction .)


state 69

    (70) expression -> ID ( . expr_list_or_empty )
    (71) expression -> ID ( . error )
    (72) expr_list_or_empty -> . expr_list
    (73) expr_list_or_empty -> .
    (74) expr_list -> . expr_list , expression
    (75) expr_list -> . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    error           shift and go to state 112
    )               reduce using rule 73 (expr_list_or_empty -> .)
    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expr_list_or_empty             shift and go to state 111
    expr_list                      shift and go to state 110
    expression                     shift and go to state 113
    expression_id                  shift and go to state 21
    const                          shift and go to state 11

state 70

    (31) assignment -> ID = . expression ;
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 114

state 71

    (30) labeled_instr -> ID : . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    choice_instr                   shift and go to state 14
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 115
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    repeat_instr                   shift and go to state 12
    print_instr                    shift and go to state 29

state 72

    (11) declaration -> error ; .

    TYPE            reduce using rule 11 (declaration -> error ; .)
    error           reduce using rule 11 (declaration -> error ; .)
    PRINT           reduce using rule 11 (declaration -> error ; .)
    ID              reduce using rule 11 (declaration -> error ; .)
    IF              reduce using rule 11 (declaration -> error ; .)
    WHILE           reduce using rule 11 (declaration -> error ; .)
    REPEAT          reduce using rule 11 (declaration -> error ; .)
    RETURN          reduce using rule 11 (declaration -> error ; .)
    BREAK           reduce using rule 11 (declaration -> error ; .)
    CONTINUE        reduce using rule 11 (declaration -> error ; .)
    {               reduce using rule 11 (declaration -> error ; .)
    (               reduce using rule 11 (declaration -> error ; .)
    INTEGER         reduce using rule 11 (declaration -> error ; .)
    FLOAT           reduce using rule 11 (declaration -> error ; .)
    STRING          reduce using rule 11 (declaration -> error ; .)
    $end            reduce using rule 11 (declaration -> error ; .)


state 73

    (41) break_instr -> BREAK ; .

    UNTIL           reduce using rule 41 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 41 (break_instr -> BREAK ; .)
    ID              reduce using rule 41 (break_instr -> BREAK ; .)
    IF              reduce using rule 41 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 41 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 41 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 41 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 41 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 41 (break_instr -> BREAK ; .)
    {               reduce using rule 41 (break_instr -> BREAK ; .)
    (               reduce using rule 41 (break_instr -> BREAK ; .)
    INTEGER         reduce using rule 41 (break_instr -> BREAK ; .)
    FLOAT           reduce using rule 41 (break_instr -> BREAK ; .)
    STRING          reduce using rule 41 (break_instr -> BREAK ; .)
    }               reduce using rule 41 (break_instr -> BREAK ; .)
    TYPE            reduce using rule 41 (break_instr -> BREAK ; .)
    error           reduce using rule 41 (break_instr -> BREAK ; .)
    $end            reduce using rule 41 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 41 (break_instr -> BREAK ; .)


state 74

    (36) while_instr -> WHILE ( . condition ) instruction
    (37) while_instr -> WHILE ( . error ) instruction
    (43) condition -> . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    error           shift and go to state 116
    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression                     shift and go to state 109
    condition                      shift and go to state 117
    const                          shift and go to state 11
    expression_id                  shift and go to state 21

state 75

    (10) declaration -> TYPE . inits ;
    (12) inits -> . inits , init
    (13) inits -> . init
    (14) init -> . ID = expression

    ID              shift and go to state 118

    init                           shift and go to state 36
    inits                          shift and go to state 37

state 76

    (8) declarations -> declarations declaration .

    TYPE            reduce using rule 8 (declarations -> declarations declaration .)
    error           reduce using rule 8 (declarations -> declarations declaration .)
    PRINT           reduce using rule 8 (declarations -> declarations declaration .)
    ID              reduce using rule 8 (declarations -> declarations declaration .)
    IF              reduce using rule 8 (declarations -> declarations declaration .)
    WHILE           reduce using rule 8 (declarations -> declarations declaration .)
    REPEAT          reduce using rule 8 (declarations -> declarations declaration .)
    RETURN          reduce using rule 8 (declarations -> declarations declaration .)
    BREAK           reduce using rule 8 (declarations -> declarations declaration .)
    CONTINUE        reduce using rule 8 (declarations -> declarations declaration .)
    {               reduce using rule 8 (declarations -> declarations declaration .)
    (               reduce using rule 8 (declarations -> declarations declaration .)
    INTEGER         reduce using rule 8 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 8 (declarations -> declarations declaration .)
    STRING          reduce using rule 8 (declarations -> declarations declaration .)


state 77

    (42) compound_instr -> { declarations instructions . }
    (15) instructions -> instructions . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    }               shift and go to state 119
    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    print_instr                    shift and go to state 29
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 85
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    choice_instr                   shift and go to state 14
    repeat_instr                   shift and go to state 12

state 78

    (10) declaration -> TYPE inits ; .

    TYPE            reduce using rule 10 (declaration -> TYPE inits ; .)
    error           reduce using rule 10 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 10 (declaration -> TYPE inits ; .)
    ID              reduce using rule 10 (declaration -> TYPE inits ; .)
    IF              reduce using rule 10 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 10 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 10 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 10 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 10 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 10 (declaration -> TYPE inits ; .)
    {               reduce using rule 10 (declaration -> TYPE inits ; .)
    (               reduce using rule 10 (declaration -> TYPE inits ; .)
    INTEGER         reduce using rule 10 (declaration -> TYPE inits ; .)
    FLOAT           reduce using rule 10 (declaration -> TYPE inits ; .)
    STRING          reduce using rule 10 (declaration -> TYPE inits ; .)
    $end            reduce using rule 10 (declaration -> TYPE inits ; .)


state 79

    (12) inits -> inits , . init
    (14) init -> . ID = expression

    ID              shift and go to state 118

    init                           shift and go to state 120

state 80

    (76) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (77) args_list_or_empty -> . args_list
    (78) args_list_or_empty -> .
    (79) args_list -> . args_list , arg
    (80) args_list -> . arg
    (81) arg -> . TYPE ID

    )               reduce using rule 78 (args_list_or_empty -> .)
    TYPE            shift and go to state 123

    args_list_or_empty             shift and go to state 122
    arg                            shift and go to state 121
    args_list                      shift and go to state 124

state 81

    (14) init -> ID = . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    const                          shift and go to state 11
    expression                     shift and go to state 125

state 82

    (29) print_instr -> PRINT error ; .

    TYPE            reduce using rule 29 (print_instr -> PRINT error ; .)
    error           reduce using rule 29 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 29 (print_instr -> PRINT error ; .)
    ID              reduce using rule 29 (print_instr -> PRINT error ; .)
    IF              reduce using rule 29 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 29 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 29 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 29 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 29 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 29 (print_instr -> PRINT error ; .)
    {               reduce using rule 29 (print_instr -> PRINT error ; .)
    (               reduce using rule 29 (print_instr -> PRINT error ; .)
    INTEGER         reduce using rule 29 (print_instr -> PRINT error ; .)
    FLOAT           reduce using rule 29 (print_instr -> PRINT error ; .)
    STRING          reduce using rule 29 (print_instr -> PRINT error ; .)
    $end            reduce using rule 29 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 29 (print_instr -> PRINT error ; .)
    }               reduce using rule 29 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 29 (print_instr -> PRINT error ; .)


state 83

    (28) print_instr -> PRINT expression ; .

    TYPE            reduce using rule 28 (print_instr -> PRINT expression ; .)
    error           reduce using rule 28 (print_instr -> PRINT expression ; .)
    PRINT           reduce using rule 28 (print_instr -> PRINT expression ; .)
    ID              reduce using rule 28 (print_instr -> PRINT expression ; .)
    IF              reduce using rule 28 (print_instr -> PRINT expression ; .)
    WHILE           reduce using rule 28 (print_instr -> PRINT expression ; .)
    REPEAT          reduce using rule 28 (print_instr -> PRINT expression ; .)
    RETURN          reduce using rule 28 (print_instr -> PRINT expression ; .)
    BREAK           reduce using rule 28 (print_instr -> PRINT expression ; .)
    CONTINUE        reduce using rule 28 (print_instr -> PRINT expression ; .)
    {               reduce using rule 28 (print_instr -> PRINT expression ; .)
    (               reduce using rule 28 (print_instr -> PRINT expression ; .)
    INTEGER         reduce using rule 28 (print_instr -> PRINT expression ; .)
    FLOAT           reduce using rule 28 (print_instr -> PRINT expression ; .)
    STRING          reduce using rule 28 (print_instr -> PRINT expression ; .)
    $end            reduce using rule 28 (print_instr -> PRINT expression ; .)
    UNTIL           reduce using rule 28 (print_instr -> PRINT expression ; .)
    }               reduce using rule 28 (print_instr -> PRINT expression ; .)
    ELSE            reduce using rule 28 (print_instr -> PRINT expression ; .)


state 84

    (38) repeat_instr -> REPEAT instructions UNTIL . condition ;
    (43) condition -> . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression                     shift and go to state 109
    condition                      shift and go to state 126
    const                          shift and go to state 11
    expression_id                  shift and go to state 21

state 85

    (15) instructions -> instructions instruction .

    UNTIL           reduce using rule 15 (instructions -> instructions instruction .)
    PRINT           reduce using rule 15 (instructions -> instructions instruction .)
    ID              reduce using rule 15 (instructions -> instructions instruction .)
    IF              reduce using rule 15 (instructions -> instructions instruction .)
    WHILE           reduce using rule 15 (instructions -> instructions instruction .)
    REPEAT          reduce using rule 15 (instructions -> instructions instruction .)
    RETURN          reduce using rule 15 (instructions -> instructions instruction .)
    BREAK           reduce using rule 15 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 15 (instructions -> instructions instruction .)
    {               reduce using rule 15 (instructions -> instructions instruction .)
    (               reduce using rule 15 (instructions -> instructions instruction .)
    INTEGER         reduce using rule 15 (instructions -> instructions instruction .)
    FLOAT           reduce using rule 15 (instructions -> instructions instruction .)
    STRING          reduce using rule 15 (instructions -> instructions instruction .)
    }               reduce using rule 15 (instructions -> instructions instruction .)


state 86

    (69) expression -> ( error ) .

    +               reduce using rule 69 (expression -> ( error ) .)
    -               reduce using rule 69 (expression -> ( error ) .)
    *               reduce using rule 69 (expression -> ( error ) .)
    /               reduce using rule 69 (expression -> ( error ) .)
    %               reduce using rule 69 (expression -> ( error ) .)
    |               reduce using rule 69 (expression -> ( error ) .)
    &               reduce using rule 69 (expression -> ( error ) .)
    ^               reduce using rule 69 (expression -> ( error ) .)
    AND             reduce using rule 69 (expression -> ( error ) .)
    OR              reduce using rule 69 (expression -> ( error ) .)
    SHL             reduce using rule 69 (expression -> ( error ) .)
    SHR             reduce using rule 69 (expression -> ( error ) .)
    EQ              reduce using rule 69 (expression -> ( error ) .)
    NEQ             reduce using rule 69 (expression -> ( error ) .)
    >               reduce using rule 69 (expression -> ( error ) .)
    <               reduce using rule 69 (expression -> ( error ) .)
    LE              reduce using rule 69 (expression -> ( error ) .)
    GE              reduce using rule 69 (expression -> ( error ) .)
    ;               reduce using rule 69 (expression -> ( error ) .)
    )               reduce using rule 69 (expression -> ( error ) .)
    ,               reduce using rule 69 (expression -> ( error ) .)


state 87

    (68) expression -> ( expression ) .

    +               reduce using rule 68 (expression -> ( expression ) .)
    -               reduce using rule 68 (expression -> ( expression ) .)
    *               reduce using rule 68 (expression -> ( expression ) .)
    /               reduce using rule 68 (expression -> ( expression ) .)
    %               reduce using rule 68 (expression -> ( expression ) .)
    |               reduce using rule 68 (expression -> ( expression ) .)
    &               reduce using rule 68 (expression -> ( expression ) .)
    ^               reduce using rule 68 (expression -> ( expression ) .)
    AND             reduce using rule 68 (expression -> ( expression ) .)
    OR              reduce using rule 68 (expression -> ( expression ) .)
    SHL             reduce using rule 68 (expression -> ( expression ) .)
    SHR             reduce using rule 68 (expression -> ( expression ) .)
    EQ              reduce using rule 68 (expression -> ( expression ) .)
    NEQ             reduce using rule 68 (expression -> ( expression ) .)
    >               reduce using rule 68 (expression -> ( expression ) .)
    <               reduce using rule 68 (expression -> ( expression ) .)
    LE              reduce using rule 68 (expression -> ( expression ) .)
    GE              reduce using rule 68 (expression -> ( expression ) .)
    ;               reduce using rule 68 (expression -> ( expression ) .)
    )               reduce using rule 68 (expression -> ( expression ) .)
    ,               reduce using rule 68 (expression -> ( expression ) .)


state 88

    (66) expression -> expression LE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 66 (expression -> expression LE expression .)
    &               reduce using rule 66 (expression -> expression LE expression .)
    ^               reduce using rule 66 (expression -> expression LE expression .)
    AND             reduce using rule 66 (expression -> expression LE expression .)
    OR              reduce using rule 66 (expression -> expression LE expression .)
    EQ              reduce using rule 66 (expression -> expression LE expression .)
    NEQ             reduce using rule 66 (expression -> expression LE expression .)
    >               reduce using rule 66 (expression -> expression LE expression .)
    <               reduce using rule 66 (expression -> expression LE expression .)
    LE              reduce using rule 66 (expression -> expression LE expression .)
    GE              reduce using rule 66 (expression -> expression LE expression .)
    ;               reduce using rule 66 (expression -> expression LE expression .)
    )               reduce using rule 66 (expression -> expression LE expression .)
    ,               reduce using rule 66 (expression -> expression LE expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    SHL             shift and go to state 53
    SHR             shift and go to state 57

  ! +               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 66 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 89

    (64) expression -> expression > expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 64 (expression -> expression > expression .)
    &               reduce using rule 64 (expression -> expression > expression .)
    ^               reduce using rule 64 (expression -> expression > expression .)
    AND             reduce using rule 64 (expression -> expression > expression .)
    OR              reduce using rule 64 (expression -> expression > expression .)
    EQ              reduce using rule 64 (expression -> expression > expression .)
    NEQ             reduce using rule 64 (expression -> expression > expression .)
    >               reduce using rule 64 (expression -> expression > expression .)
    <               reduce using rule 64 (expression -> expression > expression .)
    LE              reduce using rule 64 (expression -> expression > expression .)
    GE              reduce using rule 64 (expression -> expression > expression .)
    ;               reduce using rule 64 (expression -> expression > expression .)
    )               reduce using rule 64 (expression -> expression > expression .)
    ,               reduce using rule 64 (expression -> expression > expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    SHL             shift and go to state 53
    SHR             shift and go to state 57

  ! +               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 64 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 64 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 64 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 90

    (50) expression -> expression + expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 50 (expression -> expression + expression .)
    -               reduce using rule 50 (expression -> expression + expression .)
    |               reduce using rule 50 (expression -> expression + expression .)
    &               reduce using rule 50 (expression -> expression + expression .)
    ^               reduce using rule 50 (expression -> expression + expression .)
    AND             reduce using rule 50 (expression -> expression + expression .)
    OR              reduce using rule 50 (expression -> expression + expression .)
    SHL             reduce using rule 50 (expression -> expression + expression .)
    SHR             reduce using rule 50 (expression -> expression + expression .)
    EQ              reduce using rule 50 (expression -> expression + expression .)
    NEQ             reduce using rule 50 (expression -> expression + expression .)
    >               reduce using rule 50 (expression -> expression + expression .)
    <               reduce using rule 50 (expression -> expression + expression .)
    LE              reduce using rule 50 (expression -> expression + expression .)
    GE              reduce using rule 50 (expression -> expression + expression .)
    ;               reduce using rule 50 (expression -> expression + expression .)
    )               reduce using rule 50 (expression -> expression + expression .)
    ,               reduce using rule 50 (expression -> expression + expression .)
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52

  ! *               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 59 ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! SHL             [ shift and go to state 53 ]
  ! SHR             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 91

    (63) expression -> expression NEQ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 63 (expression -> expression NEQ expression .)
    &               reduce using rule 63 (expression -> expression NEQ expression .)
    ^               reduce using rule 63 (expression -> expression NEQ expression .)
    AND             reduce using rule 63 (expression -> expression NEQ expression .)
    OR              reduce using rule 63 (expression -> expression NEQ expression .)
    EQ              reduce using rule 63 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 63 (expression -> expression NEQ expression .)
    >               reduce using rule 63 (expression -> expression NEQ expression .)
    <               reduce using rule 63 (expression -> expression NEQ expression .)
    LE              reduce using rule 63 (expression -> expression NEQ expression .)
    GE              reduce using rule 63 (expression -> expression NEQ expression .)
    ;               reduce using rule 63 (expression -> expression NEQ expression .)
    )               reduce using rule 63 (expression -> expression NEQ expression .)
    ,               reduce using rule 63 (expression -> expression NEQ expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    SHL             shift and go to state 53
    SHR             shift and go to state 57

  ! +               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 63 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 92

    (54) expression -> expression % expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 54 (expression -> expression % expression .)
    -               reduce using rule 54 (expression -> expression % expression .)
    *               reduce using rule 54 (expression -> expression % expression .)
    /               reduce using rule 54 (expression -> expression % expression .)
    %               reduce using rule 54 (expression -> expression % expression .)
    |               reduce using rule 54 (expression -> expression % expression .)
    &               reduce using rule 54 (expression -> expression % expression .)
    ^               reduce using rule 54 (expression -> expression % expression .)
    AND             reduce using rule 54 (expression -> expression % expression .)
    OR              reduce using rule 54 (expression -> expression % expression .)
    SHL             reduce using rule 54 (expression -> expression % expression .)
    SHR             reduce using rule 54 (expression -> expression % expression .)
    EQ              reduce using rule 54 (expression -> expression % expression .)
    NEQ             reduce using rule 54 (expression -> expression % expression .)
    >               reduce using rule 54 (expression -> expression % expression .)
    <               reduce using rule 54 (expression -> expression % expression .)
    LE              reduce using rule 54 (expression -> expression % expression .)
    GE              reduce using rule 54 (expression -> expression % expression .)
    ;               reduce using rule 54 (expression -> expression % expression .)
    )               reduce using rule 54 (expression -> expression % expression .)
    ,               reduce using rule 54 (expression -> expression % expression .)

  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 52 ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! SHL             [ shift and go to state 53 ]
  ! SHR             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 93

    (60) expression -> expression SHL expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 60 (expression -> expression SHL expression .)
    &               reduce using rule 60 (expression -> expression SHL expression .)
    ^               reduce using rule 60 (expression -> expression SHL expression .)
    AND             reduce using rule 60 (expression -> expression SHL expression .)
    OR              reduce using rule 60 (expression -> expression SHL expression .)
    SHL             reduce using rule 60 (expression -> expression SHL expression .)
    SHR             reduce using rule 60 (expression -> expression SHL expression .)
    EQ              reduce using rule 60 (expression -> expression SHL expression .)
    NEQ             reduce using rule 60 (expression -> expression SHL expression .)
    >               reduce using rule 60 (expression -> expression SHL expression .)
    <               reduce using rule 60 (expression -> expression SHL expression .)
    LE              reduce using rule 60 (expression -> expression SHL expression .)
    GE              reduce using rule 60 (expression -> expression SHL expression .)
    ;               reduce using rule 60 (expression -> expression SHL expression .)
    )               reduce using rule 60 (expression -> expression SHL expression .)
    ,               reduce using rule 60 (expression -> expression SHL expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52

  ! +               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! SHL             [ shift and go to state 53 ]
  ! SHR             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 94

    (57) expression -> expression ^ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression ^ expression .)
    ^               reduce using rule 57 (expression -> expression ^ expression .)
    AND             reduce using rule 57 (expression -> expression ^ expression .)
    OR              reduce using rule 57 (expression -> expression ^ expression .)
    ;               reduce using rule 57 (expression -> expression ^ expression .)
    )               reduce using rule 57 (expression -> expression ^ expression .)
    ,               reduce using rule 57 (expression -> expression ^ expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    &               shift and go to state 63
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62

  ! +               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]


state 95

    (62) expression -> expression EQ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression EQ expression .)
    &               reduce using rule 62 (expression -> expression EQ expression .)
    ^               reduce using rule 62 (expression -> expression EQ expression .)
    AND             reduce using rule 62 (expression -> expression EQ expression .)
    OR              reduce using rule 62 (expression -> expression EQ expression .)
    EQ              reduce using rule 62 (expression -> expression EQ expression .)
    NEQ             reduce using rule 62 (expression -> expression EQ expression .)
    >               reduce using rule 62 (expression -> expression EQ expression .)
    <               reduce using rule 62 (expression -> expression EQ expression .)
    LE              reduce using rule 62 (expression -> expression EQ expression .)
    GE              reduce using rule 62 (expression -> expression EQ expression .)
    ;               reduce using rule 62 (expression -> expression EQ expression .)
    )               reduce using rule 62 (expression -> expression EQ expression .)
    ,               reduce using rule 62 (expression -> expression EQ expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    SHL             shift and go to state 53
    SHR             shift and go to state 57

  ! +               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 62 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 96

    (65) expression -> expression < expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 65 (expression -> expression < expression .)
    &               reduce using rule 65 (expression -> expression < expression .)
    ^               reduce using rule 65 (expression -> expression < expression .)
    AND             reduce using rule 65 (expression -> expression < expression .)
    OR              reduce using rule 65 (expression -> expression < expression .)
    EQ              reduce using rule 65 (expression -> expression < expression .)
    NEQ             reduce using rule 65 (expression -> expression < expression .)
    >               reduce using rule 65 (expression -> expression < expression .)
    <               reduce using rule 65 (expression -> expression < expression .)
    LE              reduce using rule 65 (expression -> expression < expression .)
    GE              reduce using rule 65 (expression -> expression < expression .)
    ;               reduce using rule 65 (expression -> expression < expression .)
    )               reduce using rule 65 (expression -> expression < expression .)
    ,               reduce using rule 65 (expression -> expression < expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    SHL             shift and go to state 53
    SHR             shift and go to state 57

  ! +               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 65 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 65 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 65 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 97

    (61) expression -> expression SHR expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 61 (expression -> expression SHR expression .)
    &               reduce using rule 61 (expression -> expression SHR expression .)
    ^               reduce using rule 61 (expression -> expression SHR expression .)
    AND             reduce using rule 61 (expression -> expression SHR expression .)
    OR              reduce using rule 61 (expression -> expression SHR expression .)
    SHL             reduce using rule 61 (expression -> expression SHR expression .)
    SHR             reduce using rule 61 (expression -> expression SHR expression .)
    EQ              reduce using rule 61 (expression -> expression SHR expression .)
    NEQ             reduce using rule 61 (expression -> expression SHR expression .)
    >               reduce using rule 61 (expression -> expression SHR expression .)
    <               reduce using rule 61 (expression -> expression SHR expression .)
    LE              reduce using rule 61 (expression -> expression SHR expression .)
    GE              reduce using rule 61 (expression -> expression SHR expression .)
    ;               reduce using rule 61 (expression -> expression SHR expression .)
    )               reduce using rule 61 (expression -> expression SHR expression .)
    ,               reduce using rule 61 (expression -> expression SHR expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52

  ! +               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! SHL             [ shift and go to state 53 ]
  ! SHR             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 98

    (59) expression -> expression OR expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    OR              reduce using rule 59 (expression -> expression OR expression .)
    ;               reduce using rule 59 (expression -> expression OR expression .)
    )               reduce using rule 59 (expression -> expression OR expression .)
    ,               reduce using rule 59 (expression -> expression OR expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62

  ! +               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 58 ]


state 99

    (51) expression -> expression - expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 51 (expression -> expression - expression .)
    -               reduce using rule 51 (expression -> expression - expression .)
    |               reduce using rule 51 (expression -> expression - expression .)
    &               reduce using rule 51 (expression -> expression - expression .)
    ^               reduce using rule 51 (expression -> expression - expression .)
    AND             reduce using rule 51 (expression -> expression - expression .)
    OR              reduce using rule 51 (expression -> expression - expression .)
    SHL             reduce using rule 51 (expression -> expression - expression .)
    SHR             reduce using rule 51 (expression -> expression - expression .)
    EQ              reduce using rule 51 (expression -> expression - expression .)
    NEQ             reduce using rule 51 (expression -> expression - expression .)
    >               reduce using rule 51 (expression -> expression - expression .)
    <               reduce using rule 51 (expression -> expression - expression .)
    LE              reduce using rule 51 (expression -> expression - expression .)
    GE              reduce using rule 51 (expression -> expression - expression .)
    ;               reduce using rule 51 (expression -> expression - expression .)
    )               reduce using rule 51 (expression -> expression - expression .)
    ,               reduce using rule 51 (expression -> expression - expression .)
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52

  ! *               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 59 ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! SHL             [ shift and go to state 53 ]
  ! SHR             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 100

    (53) expression -> expression / expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 53 (expression -> expression / expression .)
    -               reduce using rule 53 (expression -> expression / expression .)
    *               reduce using rule 53 (expression -> expression / expression .)
    /               reduce using rule 53 (expression -> expression / expression .)
    %               reduce using rule 53 (expression -> expression / expression .)
    |               reduce using rule 53 (expression -> expression / expression .)
    &               reduce using rule 53 (expression -> expression / expression .)
    ^               reduce using rule 53 (expression -> expression / expression .)
    AND             reduce using rule 53 (expression -> expression / expression .)
    OR              reduce using rule 53 (expression -> expression / expression .)
    SHL             reduce using rule 53 (expression -> expression / expression .)
    SHR             reduce using rule 53 (expression -> expression / expression .)
    EQ              reduce using rule 53 (expression -> expression / expression .)
    NEQ             reduce using rule 53 (expression -> expression / expression .)
    >               reduce using rule 53 (expression -> expression / expression .)
    <               reduce using rule 53 (expression -> expression / expression .)
    LE              reduce using rule 53 (expression -> expression / expression .)
    GE              reduce using rule 53 (expression -> expression / expression .)
    ;               reduce using rule 53 (expression -> expression / expression .)
    )               reduce using rule 53 (expression -> expression / expression .)
    ,               reduce using rule 53 (expression -> expression / expression .)

  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 52 ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! SHL             [ shift and go to state 53 ]
  ! SHR             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 101

    (55) expression -> expression | expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 55 (expression -> expression | expression .)
    AND             reduce using rule 55 (expression -> expression | expression .)
    OR              reduce using rule 55 (expression -> expression | expression .)
    ;               reduce using rule 55 (expression -> expression | expression .)
    )               reduce using rule 55 (expression -> expression | expression .)
    ,               reduce using rule 55 (expression -> expression | expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    &               shift and go to state 63
    ^               shift and go to state 54
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62

  ! +               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 55 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 55 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 55 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 61 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]


state 102

    (67) expression -> expression GE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 67 (expression -> expression GE expression .)
    &               reduce using rule 67 (expression -> expression GE expression .)
    ^               reduce using rule 67 (expression -> expression GE expression .)
    AND             reduce using rule 67 (expression -> expression GE expression .)
    OR              reduce using rule 67 (expression -> expression GE expression .)
    EQ              reduce using rule 67 (expression -> expression GE expression .)
    NEQ             reduce using rule 67 (expression -> expression GE expression .)
    >               reduce using rule 67 (expression -> expression GE expression .)
    <               reduce using rule 67 (expression -> expression GE expression .)
    LE              reduce using rule 67 (expression -> expression GE expression .)
    GE              reduce using rule 67 (expression -> expression GE expression .)
    ;               reduce using rule 67 (expression -> expression GE expression .)
    )               reduce using rule 67 (expression -> expression GE expression .)
    ,               reduce using rule 67 (expression -> expression GE expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    SHL             shift and go to state 53
    SHR             shift and go to state 57

  ! +               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 67 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 103

    (56) expression -> expression & expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    |               reduce using rule 56 (expression -> expression & expression .)
    &               reduce using rule 56 (expression -> expression & expression .)
    ^               reduce using rule 56 (expression -> expression & expression .)
    AND             reduce using rule 56 (expression -> expression & expression .)
    OR              reduce using rule 56 (expression -> expression & expression .)
    ;               reduce using rule 56 (expression -> expression & expression .)
    )               reduce using rule 56 (expression -> expression & expression .)
    ,               reduce using rule 56 (expression -> expression & expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62

  ! +               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 56 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 56 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 56 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]


state 104

    (52) expression -> expression * expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    +               reduce using rule 52 (expression -> expression * expression .)
    -               reduce using rule 52 (expression -> expression * expression .)
    *               reduce using rule 52 (expression -> expression * expression .)
    /               reduce using rule 52 (expression -> expression * expression .)
    %               reduce using rule 52 (expression -> expression * expression .)
    |               reduce using rule 52 (expression -> expression * expression .)
    &               reduce using rule 52 (expression -> expression * expression .)
    ^               reduce using rule 52 (expression -> expression * expression .)
    AND             reduce using rule 52 (expression -> expression * expression .)
    OR              reduce using rule 52 (expression -> expression * expression .)
    SHL             reduce using rule 52 (expression -> expression * expression .)
    SHR             reduce using rule 52 (expression -> expression * expression .)
    EQ              reduce using rule 52 (expression -> expression * expression .)
    NEQ             reduce using rule 52 (expression -> expression * expression .)
    >               reduce using rule 52 (expression -> expression * expression .)
    <               reduce using rule 52 (expression -> expression * expression .)
    LE              reduce using rule 52 (expression -> expression * expression .)
    GE              reduce using rule 52 (expression -> expression * expression .)
    ;               reduce using rule 52 (expression -> expression * expression .)
    )               reduce using rule 52 (expression -> expression * expression .)
    ,               reduce using rule 52 (expression -> expression * expression .)

  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 52 ]
  ! |               [ shift and go to state 61 ]
  ! &               [ shift and go to state 63 ]
  ! ^               [ shift and go to state 54 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]
  ! SHL             [ shift and go to state 53 ]
  ! SHR             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 50 ]
  ! >               [ shift and go to state 48 ]
  ! <               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 62 ]


state 105

    (58) expression -> expression AND expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    AND             reduce using rule 58 (expression -> expression AND expression .)
    OR              reduce using rule 58 (expression -> expression AND expression .)
    ;               reduce using rule 58 (expression -> expression AND expression .)
    )               reduce using rule 58 (expression -> expression AND expression .)
    ,               reduce using rule 58 (expression -> expression AND expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62

  ! +               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 58 ]


state 106

    (39) return_instr -> RETURN expression ; .

    UNTIL           reduce using rule 39 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 39 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 39 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 39 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 39 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 39 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 39 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 39 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 39 (return_instr -> RETURN expression ; .)
    {               reduce using rule 39 (return_instr -> RETURN expression ; .)
    (               reduce using rule 39 (return_instr -> RETURN expression ; .)
    INTEGER         reduce using rule 39 (return_instr -> RETURN expression ; .)
    FLOAT           reduce using rule 39 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 39 (return_instr -> RETURN expression ; .)
    }               reduce using rule 39 (return_instr -> RETURN expression ; .)
    TYPE            reduce using rule 39 (return_instr -> RETURN expression ; .)
    error           reduce using rule 39 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 39 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 39 (return_instr -> RETURN expression ; .)


state 107

    (34) choice_instr -> IF ( error . ) instruction
    (35) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 127


state 108

    (32) choice_instr -> IF ( condition . ) instruction
    (33) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 128


state 109

    (43) condition -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               reduce using rule 43 (condition -> expression .)
    )               reduce using rule 43 (condition -> expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 110

    (72) expr_list_or_empty -> expr_list .
    (74) expr_list -> expr_list . , expression

    )               reduce using rule 72 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 129


state 111

    (70) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 130


state 112

    (71) expression -> ID ( error . )

    )               shift and go to state 131


state 113

    (75) expr_list -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ,               reduce using rule 75 (expr_list -> expression .)
    )               reduce using rule 75 (expr_list -> expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 114

    (31) assignment -> ID = expression . ;
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               shift and go to state 132
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 115

    (30) labeled_instr -> ID : instruction .

    UNTIL           reduce using rule 30 (labeled_instr -> ID : instruction .)
    PRINT           reduce using rule 30 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 30 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 30 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 30 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 30 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 30 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 30 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 30 (labeled_instr -> ID : instruction .)
    {               reduce using rule 30 (labeled_instr -> ID : instruction .)
    (               reduce using rule 30 (labeled_instr -> ID : instruction .)
    INTEGER         reduce using rule 30 (labeled_instr -> ID : instruction .)
    FLOAT           reduce using rule 30 (labeled_instr -> ID : instruction .)
    STRING          reduce using rule 30 (labeled_instr -> ID : instruction .)
    }               reduce using rule 30 (labeled_instr -> ID : instruction .)
    TYPE            reduce using rule 30 (labeled_instr -> ID : instruction .)
    error           reduce using rule 30 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 30 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 30 (labeled_instr -> ID : instruction .)


state 116

    (37) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 133


state 117

    (36) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 134


state 118

    (14) init -> ID . = expression

    =               shift and go to state 81


state 119

    (42) compound_instr -> { declarations instructions } .

    TYPE            reduce using rule 42 (compound_instr -> { declarations instructions } .)
    error           reduce using rule 42 (compound_instr -> { declarations instructions } .)
    PRINT           reduce using rule 42 (compound_instr -> { declarations instructions } .)
    ID              reduce using rule 42 (compound_instr -> { declarations instructions } .)
    IF              reduce using rule 42 (compound_instr -> { declarations instructions } .)
    WHILE           reduce using rule 42 (compound_instr -> { declarations instructions } .)
    REPEAT          reduce using rule 42 (compound_instr -> { declarations instructions } .)
    RETURN          reduce using rule 42 (compound_instr -> { declarations instructions } .)
    BREAK           reduce using rule 42 (compound_instr -> { declarations instructions } .)
    CONTINUE        reduce using rule 42 (compound_instr -> { declarations instructions } .)
    {               reduce using rule 42 (compound_instr -> { declarations instructions } .)
    (               reduce using rule 42 (compound_instr -> { declarations instructions } .)
    INTEGER         reduce using rule 42 (compound_instr -> { declarations instructions } .)
    FLOAT           reduce using rule 42 (compound_instr -> { declarations instructions } .)
    STRING          reduce using rule 42 (compound_instr -> { declarations instructions } .)
    $end            reduce using rule 42 (compound_instr -> { declarations instructions } .)
    UNTIL           reduce using rule 42 (compound_instr -> { declarations instructions } .)
    }               reduce using rule 42 (compound_instr -> { declarations instructions } .)
    ELSE            reduce using rule 42 (compound_instr -> { declarations instructions } .)


state 120

    (12) inits -> inits , init .

    ;               reduce using rule 12 (inits -> inits , init .)
    ,               reduce using rule 12 (inits -> inits , init .)


state 121

    (80) args_list -> arg .

    ,               reduce using rule 80 (args_list -> arg .)
    )               reduce using rule 80 (args_list -> arg .)


state 122

    (76) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 135


state 123

    (81) arg -> TYPE . ID

    ID              shift and go to state 136


state 124

    (77) args_list_or_empty -> args_list .
    (79) args_list -> args_list . , arg

    )               reduce using rule 77 (args_list_or_empty -> args_list .)
    ,               shift and go to state 137


state 125

    (14) init -> ID = expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ;               reduce using rule 14 (init -> ID = expression .)
    ,               reduce using rule 14 (init -> ID = expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 126

    (38) repeat_instr -> REPEAT instructions UNTIL condition . ;

    ;               shift and go to state 138


state 127

    (34) choice_instr -> IF ( error ) . instruction
    (35) choice_instr -> IF ( error ) . instruction ELSE instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    choice_instr                   shift and go to state 14
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 139
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    repeat_instr                   shift and go to state 12
    print_instr                    shift and go to state 29

state 128

    (32) choice_instr -> IF ( condition ) . instruction
    (33) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    print_instr                    shift and go to state 29
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 140
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    choice_instr                   shift and go to state 14
    repeat_instr                   shift and go to state 12

state 129

    (74) expr_list -> expr_list , . expression
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    (               shift and go to state 13
    ID              shift and go to state 41
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    expression_id                  shift and go to state 21
    expression                     shift and go to state 141
    const                          shift and go to state 11

state 130

    (70) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 70 (expression -> ID ( expr_list_or_empty ) .)


state 131

    (71) expression -> ID ( error ) .

    +               reduce using rule 71 (expression -> ID ( error ) .)
    -               reduce using rule 71 (expression -> ID ( error ) .)
    *               reduce using rule 71 (expression -> ID ( error ) .)
    /               reduce using rule 71 (expression -> ID ( error ) .)
    %               reduce using rule 71 (expression -> ID ( error ) .)
    |               reduce using rule 71 (expression -> ID ( error ) .)
    &               reduce using rule 71 (expression -> ID ( error ) .)
    ^               reduce using rule 71 (expression -> ID ( error ) .)
    AND             reduce using rule 71 (expression -> ID ( error ) .)
    OR              reduce using rule 71 (expression -> ID ( error ) .)
    SHL             reduce using rule 71 (expression -> ID ( error ) .)
    SHR             reduce using rule 71 (expression -> ID ( error ) .)
    EQ              reduce using rule 71 (expression -> ID ( error ) .)
    NEQ             reduce using rule 71 (expression -> ID ( error ) .)
    >               reduce using rule 71 (expression -> ID ( error ) .)
    <               reduce using rule 71 (expression -> ID ( error ) .)
    LE              reduce using rule 71 (expression -> ID ( error ) .)
    GE              reduce using rule 71 (expression -> ID ( error ) .)
    ;               reduce using rule 71 (expression -> ID ( error ) .)
    )               reduce using rule 71 (expression -> ID ( error ) .)
    ,               reduce using rule 71 (expression -> ID ( error ) .)


state 132

    (31) assignment -> ID = expression ; .

    }               reduce using rule 31 (assignment -> ID = expression ; .)
    PRINT           reduce using rule 31 (assignment -> ID = expression ; .)
    ID              reduce using rule 31 (assignment -> ID = expression ; .)
    IF              reduce using rule 31 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 31 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 31 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 31 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 31 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 31 (assignment -> ID = expression ; .)
    {               reduce using rule 31 (assignment -> ID = expression ; .)
    (               reduce using rule 31 (assignment -> ID = expression ; .)
    INTEGER         reduce using rule 31 (assignment -> ID = expression ; .)
    FLOAT           reduce using rule 31 (assignment -> ID = expression ; .)
    STRING          reduce using rule 31 (assignment -> ID = expression ; .)
    UNTIL           reduce using rule 31 (assignment -> ID = expression ; .)
    TYPE            reduce using rule 31 (assignment -> ID = expression ; .)
    error           reduce using rule 31 (assignment -> ID = expression ; .)
    $end            reduce using rule 31 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 31 (assignment -> ID = expression ; .)


state 133

    (37) while_instr -> WHILE ( error ) . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    choice_instr                   shift and go to state 14
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 142
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    repeat_instr                   shift and go to state 12
    print_instr                    shift and go to state 29

state 134

    (36) while_instr -> WHILE ( condition ) . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    print_instr                    shift and go to state 29
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 143
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    choice_instr                   shift and go to state 14
    repeat_instr                   shift and go to state 12

state 135

    (76) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (42) compound_instr -> . { declarations instructions }

    {               shift and go to state 2

    compound_instr                 shift and go to state 144

state 136

    (81) arg -> TYPE ID .

    ,               reduce using rule 81 (arg -> TYPE ID .)
    )               reduce using rule 81 (arg -> TYPE ID .)


state 137

    (79) args_list -> args_list , . arg
    (81) arg -> . TYPE ID

    TYPE            shift and go to state 123

    arg                            shift and go to state 145

state 138

    (38) repeat_instr -> REPEAT instructions UNTIL condition ; .

    TYPE            reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    error           reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    PRINT           reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ID              reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    IF              reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    WHILE           reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    REPEAT          reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    RETURN          reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    BREAK           reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    CONTINUE        reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    {               reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    (               reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    INTEGER         reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    FLOAT           reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    STRING          reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    $end            reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    UNTIL           reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    }               reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ELSE            reduce using rule 38 (repeat_instr -> REPEAT instructions UNTIL condition ; .)


state 139

    (34) choice_instr -> IF ( error ) instruction .
    (35) choice_instr -> IF ( error ) instruction . ELSE instruction

    }               reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    PRINT           reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    (               reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    INTEGER         reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    FLOAT           reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    STRING          reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    TYPE            reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    error           reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 34 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 146

  ! ELSE            [ reduce using rule 34 (choice_instr -> IF ( error ) instruction .) ]


state 140

    (32) choice_instr -> IF ( condition ) instruction .
    (33) choice_instr -> IF ( condition ) instruction . ELSE instruction

    }               reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    PRINT           reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    (               reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    INTEGER         reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    FLOAT           reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    STRING          reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    TYPE            reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    error           reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 32 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 147

  ! ELSE            [ reduce using rule 32 (choice_instr -> IF ( condition ) instruction .) ]


state 141

    (74) expr_list -> expr_list , expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . % expression
    (55) expression -> expression . | expression
    (56) expression -> expression . & expression
    (57) expression -> expression . ^ expression
    (58) expression -> expression . AND expression
    (59) expression -> expression . OR expression
    (60) expression -> expression . SHL expression
    (61) expression -> expression . SHR expression
    (62) expression -> expression . EQ expression
    (63) expression -> expression . NEQ expression
    (64) expression -> expression . > expression
    (65) expression -> expression . < expression
    (66) expression -> expression . LE expression
    (67) expression -> expression . GE expression

    ,               reduce using rule 74 (expr_list -> expr_list , expression .)
    )               reduce using rule 74 (expr_list -> expr_list , expression .)
    +               shift and go to state 49
    -               shift and go to state 59
    *               shift and go to state 64
    /               shift and go to state 60
    %               shift and go to state 52
    |               shift and go to state 61
    &               shift and go to state 63
    ^               shift and go to state 54
    AND             shift and go to state 65
    OR              shift and go to state 58
    SHL             shift and go to state 53
    SHR             shift and go to state 57
    EQ              shift and go to state 55
    NEQ             shift and go to state 50
    >               shift and go to state 48
    <               shift and go to state 56
    LE              shift and go to state 47
    GE              shift and go to state 62


state 142

    (37) while_instr -> WHILE ( error ) instruction .

    }               reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    (               reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    INTEGER         reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    FLOAT           reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    STRING          reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    UNTIL           reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    TYPE            reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    error           reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 37 (while_instr -> WHILE ( error ) instruction .)


state 143

    (36) while_instr -> WHILE ( condition ) instruction .

    }               reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    (               reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    INTEGER         reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    FLOAT           reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    UNTIL           reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    TYPE            reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    error           reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 36 (while_instr -> WHILE ( condition ) instruction .)


state 144

    (76) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    error           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    (               reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    INTEGER         reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    FLOAT           reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    STRING          reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    $end            reduce using rule 76 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 145

    (79) args_list -> args_list , arg .

    ,               reduce using rule 79 (args_list -> args_list , arg .)
    )               reduce using rule 79 (args_list -> args_list , arg .)


state 146

    (35) choice_instr -> IF ( error ) instruction ELSE . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    choice_instr                   shift and go to state 14
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 148
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    repeat_instr                   shift and go to state 12
    print_instr                    shift and go to state 29

state 147

    (33) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (17) instruction -> . print_instr
    (18) instruction -> . labeled_instr
    (19) instruction -> . assignment
    (20) instruction -> . choice_instr
    (21) instruction -> . while_instr
    (22) instruction -> . repeat_instr
    (23) instruction -> . return_instr
    (24) instruction -> . break_instr
    (25) instruction -> . continue_instr
    (26) instruction -> . compound_instr
    (27) instruction -> . expression ;
    (28) print_instr -> . PRINT expression ;
    (29) print_instr -> . PRINT error ;
    (30) labeled_instr -> . ID : instruction
    (31) assignment -> . ID = expression ;
    (32) choice_instr -> . IF ( condition ) instruction
    (33) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (34) choice_instr -> . IF ( error ) instruction
    (35) choice_instr -> . IF ( error ) instruction ELSE instruction
    (36) while_instr -> . WHILE ( condition ) instruction
    (37) while_instr -> . WHILE ( error ) instruction
    (38) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (39) return_instr -> . RETURN expression ;
    (41) break_instr -> . BREAK ;
    (40) continue_instr -> . CONTINUE ;
    (42) compound_instr -> . { declarations instructions }
    (48) expression -> . const
    (49) expression -> . expression_id
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression % expression
    (55) expression -> . expression | expression
    (56) expression -> . expression & expression
    (57) expression -> . expression ^ expression
    (58) expression -> . expression AND expression
    (59) expression -> . expression OR expression
    (60) expression -> . expression SHL expression
    (61) expression -> . expression SHR expression
    (62) expression -> . expression EQ expression
    (63) expression -> . expression NEQ expression
    (64) expression -> . expression > expression
    (65) expression -> . expression < expression
    (66) expression -> . expression LE expression
    (67) expression -> . expression GE expression
    (68) expression -> . ( expression )
    (69) expression -> . ( error )
    (70) expression -> . ID ( expr_list_or_empty )
    (71) expression -> . ID ( error )
    (44) const -> . INTEGER
    (45) const -> . FLOAT
    (46) const -> . STRING
    (47) expression_id -> . ID

    PRINT           shift and go to state 6
    ID              shift and go to state 20
    IF              shift and go to state 18
    WHILE           shift and go to state 28
    REPEAT          shift and go to state 9
    RETURN          shift and go to state 17
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 10
    {               shift and go to state 2
    (               shift and go to state 13
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 23
    STRING          shift and go to state 31

    return_instr                   shift and go to state 1
    expression                     shift and go to state 15
    compound_instr                 shift and go to state 4
    print_instr                    shift and go to state 29
    break_instr                    shift and go to state 22
    continue_instr                 shift and go to state 24
    labeled_instr                  shift and go to state 16
    while_instr                    shift and go to state 33
    instruction                    shift and go to state 149
    assignment                     shift and go to state 26
    const                          shift and go to state 11
    expression_id                  shift and go to state 21
    choice_instr                   shift and go to state 14
    repeat_instr                   shift and go to state 12

state 148

    (35) choice_instr -> IF ( error ) instruction ELSE instruction .

    }               reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    PRINT           reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    (               reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    INTEGER         reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FLOAT           reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    STRING          reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    TYPE            reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    error           reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 35 (choice_instr -> IF ( error ) instruction ELSE instruction .)


state 149

    (33) choice_instr -> IF ( condition ) instruction ELSE instruction .

    }               reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    (               reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    INTEGER         reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FLOAT           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    TYPE            reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    error           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 33 (choice_instr -> IF ( condition ) instruction ELSE instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for error in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for { in state 0 resolved as shift
WARNING: shift/reduce conflict for ( in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
